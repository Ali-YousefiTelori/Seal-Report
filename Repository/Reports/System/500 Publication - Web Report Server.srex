<?xml version="1.0" encoding="utf-8"?><Report xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><GUID>e5462649-f2a7-44f0-ac48-1d8ede9f615d</GUID><ViewGUID>20d37157-fbdf-4220-8574-cf56d81ec9f3</ViewGUID><InputValues><ReportRestriction><GUID>f26df1b7-7aaf-4226-970e-c16afeb5b984</GUID><Type>Text</Type><DisplayName>Web Report Server Distribution</DisplayName><DisplayOrder>3</DisplayOrder><EnumGUID>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</EnumGUID><PivotPosition>Row</PivotPosition><TypeEd>Text</TypeEd><EnumGUIDEL>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</EnumGUIDEL><Prompt>PromptOneValue</Prompt><TypeRe>Text</TypeRe><ChangeOperator>false</ChangeOperator><EnumGUIDRE>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</EnumGUIDRE><DisplayOrderRE>3</DisplayOrderRE><Value1>{InstallationDirectory}\Web.NETCore</Value1></ReportRestriction></InputValues><Sources><ReportSource><GUID>92a001bf-5000-4dfe-b5b6-d86accb65aff</GUID><Name>Main</Name><Connections><MetaConnection><GUID>67ad9065-d857-463d-acf4-923dacd1c053</GUID><Name>connection</Name><ConnectionString>Provider=SQLOLEDB;data source=localhost;initial catalog=adb;Integrated Security=SSPI;</ConnectionString></MetaConnection></Connections><ConnectionGUID>67ad9065-d857-463d-acf4-923dacd1c053</ConnectionGUID><IsNoSQL>true</IsNoSQL><MetaData><Tables><MetaTable><GUID>3988c23c-6ad6-40d7-b312-4a00f5f26b7c</GUID><Alias>SealMasterTable</Alias><DynamicColumns>true</DynamicColumns></MetaTable></Tables><Enums><MetaEnum><GUID>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</GUID><Name>Source Folders</Name></MetaEnum></Enums></MetaData></ReportSource></Sources><Models><ReportModel><GUID>fc05615f-3ba8-4fd3-b87c-c8fbe3bd07dc</GUID><Name>Model</Name><SourceGUID>92a001bf-5000-4dfe-b5b6-d86accb65aff</SourceGUID></ReportModel></Models><Tasks><ReportTask><GUID>ccb62554-63e2-4cbc-9d18-e59099cb573c</GUID><Name>Publish Web Report Server</Name><CancelReport>false</CancelReport><SourceGUID>92a001bf-5000-4dfe-b5b6-d86accb65aff</SourceGUID><Script>@using System.IO&#xD;
@using System.Net&#xD;
@{&#xD;
    ReportTask task = Model;&#xD;
    Report report = task.Report;&#xD;
    Repository repository = report.Repository;&#xD;
&#xD;
    var sourceRestr = report.GetInputValueByName("Web Report Server Distribution");&#xD;
    &#xD;
    //Configure the root repository destination folder:&#xD;
    var webServerDestination = "";  // TO BE MODIFIED !&#xD;
    webServerDestination =@"\\wsl$\Ubuntu\seal4"; //For file system (Ubuntu Sub-System)&#xD;
    //webServerDestination = "/"; //FTP root folder&#xD;
    //webServerDestination = "/wwwroot/"; //FTP root folder&#xD;
&#xD;
    //If not using the File System, configure a FTP device if necessary&#xD;
    OutputFileServerDevice device = null;&#xD;
    /*&#xD;
    device = new OutputFileServerDevice() { &#xD;
        Protocol = FileServerProtocol.FTP, &#xD;
        HostName = "127.0.0.1",&#xD;
        PortNumber = 21,&#xD;
        UserName = "tester",&#xD;
        ClearPassword = "password",&#xD;
    };&#xD;
    */&#xD;
    &#xD;
    if (string.IsNullOrEmpty(webServerDestination)) {&#xD;
        throw new Exception("Configure the task first (Edit the 'Publish Web Report Server' Task Script): Define at least the Web Server Destination Folder...");&#xD;
    }&#xD;
    &#xD;
    //Customize the FtpGetRequest&#xD;
    OutputFileServerDevice.CustomFtpGetRequest ftpGetRequest = null;&#xD;
    if (device != null) {&#xD;
        ftpGetRequest = new OutputFileServerDevice.CustomFtpGetRequest(delegate(string destination, string method) {&#xD;
            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(string.Format("ftp://{0}:{1}{2}", device.HostName, device.PortNumber, destination));&#xD;
            request.KeepAlive = true;&#xD;
            request.Method = method;&#xD;
            request.Credentials = new NetworkCredential(device.UserName, device.ClearPassword);&#xD;
&#xD;
            //SSL Management: Accept all certificates or add the certificate to the request&#xD;
            //request.EnableSsl = true;&#xD;
            //ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) =&gt; true;&#xD;
            //request.ClientCertificates = new X509CertificateCollection() { X509Certificate.CreateFromCertFile(@"C:\_dev\Tests\FileZillaKeys\c1.crt") } ;&#xD;
            return request;        &#xD;
        });    &#xD;
    }&#xD;
&#xD;
&#xD;
    //Web Report Server&#xD;
    var sourcePath = sourceRestr.FirstStringValue;&#xD;
    if (!Directory.Exists(sourcePath))  {&#xD;
        throw new Exception("Invalid directory: " + sourcePath);&#xD;
    }&#xD;
    &#xD;
    var destPath = webServerDestination;&#xD;
    if (device != null) { destPath = destPath.Replace("\\","/"); }&#xD;
    &#xD;
    report.LogMessage("Copying directory '{0}' to '{1}' using {2}", sourcePath, destPath, device != null ? " FTP device": "File System");       &#xD;
    &#xD;
    if (device == null) {&#xD;
        FileHelper.CopyDirectory(sourcePath, destPath, true, report);&#xD;
    }&#xD;
    else {&#xD;
        device.FtpPutDirectory(sourcePath, destPath, true, report, ftpGetRequest);&#xD;
    }&#xD;
    &#xD;
    //Check config&#xD;
    CheckConfigurationFile(Path.Combine(destPath, "appsettings.json"), Path.Combine(sourcePath,"appsettings.Release.json"), report, device, ftpGetRequest);&#xD;
    CheckConfigurationFile(Path.Combine(destPath, "web.config"), Path.Combine(sourcePath,"web.release.config"), report, device, ftpGetRequest);&#xD;
}&#xD;
&#xD;
@functions {&#xD;
    void CheckConfigurationFile(string currentConfigFile, string sourceReleaseConfigFile, ReportExecutionLog log, OutputFileServerDevice device, OutputFileServerDevice.CustomFtpGetRequest ftpGetRequest)&#xD;
    {&#xD;
        if (ftpGetRequest == null) {&#xD;
            if (!File.Exists(currentConfigFile) &amp;&amp; File.Exists(sourceReleaseConfigFile))&#xD;
            {&#xD;
                log.LogMessage("Creating Config file from '{0}'", sourceReleaseConfigFile);&#xD;
                File.Copy(sourceReleaseConfigFile, currentConfigFile, true);&#xD;
            }        &#xD;
        }&#xD;
        else {&#xD;
            if (!device.FtpFileExists(currentConfigFile, ftpGetRequest) &amp;&amp; File.Exists(sourceReleaseConfigFile))&#xD;
            {&#xD;
                log.LogMessage("Creating Config file from '{0}'", sourceReleaseConfigFile);&#xD;
                device.FtpPutFile(sourceReleaseConfigFile, currentConfigFile, ftpGetRequest);&#xD;
            }        &#xD;
        }&#xD;
    } &#xD;
}&#xD;
</Script><SortOrder>1</SortOrder></ReportTask></Tasks><Views><ReportView><GUID>20d37157-fbdf-4220-8574-cf56d81ec9f3</GUID><Name>View</Name><Views><ReportView><GUID>ead3e326-d805-4f76-9e69-796f1e01c028</GUID><Name>Model</Name><Views><ReportView><GUID>a54647f1-e594-4b20-866c-7c5a9b27be95</GUID><Name>Model Container</Name><Views><ReportView><GUID>1354bc91-9fc8-4439-befa-677fcb8495f3</GUID><Name>Page Table</Name><TemplateName>Page Table</TemplateName><SortOrder>1</SortOrder></ReportView><ReportView><GUID>6cab49a1-1457-4df0-a556-566794d46ed6</GUID><Name>Chart JS</Name><TemplateName>Chart JS</TemplateName><SortOrder>2</SortOrder></ReportView><ReportView><GUID>a554b6b3-2516-4d33-b9d3-a1d0e2026835</GUID><Name>Chart NVD3</Name><TemplateName>Chart NVD3</TemplateName><SortOrder>3</SortOrder></ReportView><ReportView><GUID>5d68d1d6-27eb-4c8a-ac33-9f6011572e2e</GUID><Name>Chart Plotly</Name><TemplateName>Chart Plotly</TemplateName><SortOrder>4</SortOrder></ReportView><ReportView><GUID>90e44b15-8fd3-4bf0-91f9-6c043e09735c</GUID><Name>Data Table</Name><TemplateName>Data Table</TemplateName><SortOrder>5</SortOrder></ReportView></Views><TemplateName>Model Container</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Model</TemplateName><ModelGUID>fc05615f-3ba8-4fd3-b87c-c8fbe3bd07dc</ModelGUID><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Report</TemplateName><Parameters><Parameter><Name>messages_mode</Name><Value>enabledshown</Value></Parameter><Parameter><Name>restrictions_per_row</Name><Value>2</Value></Parameter></Parameters><SortOrder>1</SortOrder></ReportView></Views><InitScript>@using System.IO&#xD;
@{&#xD;
    Report report = Model;&#xD;
	ReportExecutionLog log = report;&#xD;
&#xD;
    //Check Security: To be adapted to Publish from the Web Report Server itself&#xD;
    bool allowPublication = false;&#xD;
    if (report.ExecutionContext == ReportExecutionContext.DesignerReport) {&#xD;
        allowPublication = true;&#xD;
    }&#xD;
    //Or check for a special user or group to allow execution from the Web&#xD;
    //if (report.SecurityContext != null &amp;&amp; (report.SecurityContext.BelongsToGroup("aGroupName") || report.SecurityContext.UserName = "aUserName")) {&#xD;
    //    allowPublication = true;&#xD;
    //}&#xD;
    if (!allowPublication) {&#xD;
        throw new Exception("This report can only be executed from the Report Designer");&#xD;
    }&#xD;
    &#xD;
    var foldersEnum = report.Sources[0].MetaData.Enums.FirstOrDefault(i =&gt; i.Name == "Source Folders");&#xD;
    if (foldersEnum != null &amp;&amp; foldersEnum.Values.Count == 0) {&#xD;
        foldersEnum.Values.Add(new MetaEV() { Id = report.Repository.ApplicationPath + "\\Web.NETCore", Val = string.Format(".NETCore ({0})", report.Repository.ApplicationPath + "\\Web.NETCore") });&#xD;
        foldersEnum.Values.Add(new MetaEV() { Id = report.Repository.ApplicationPath + "\\Web", Val = string.Format(".NET ({0})", report.Repository.ApplicationPath + "\\Web") });&#xD;
    }&#xD;
}&#xD;
</InitScript></Report>