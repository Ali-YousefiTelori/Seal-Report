@using Seal.Model;
@{
    ReportViewTemplate Template = Model;

    //Template Name
    Template.Name = "Report";

    //If true, the view can be configured for a report model
    Template.ForReportModel = false;

    //True if the template uses Theme values
    Template.UseThemeValues = true;

    //Parameters for this template
    Template.Parameters.Add(new Parameter() { Name = "report_description", Type = ViewParameterType.Text, DisplayName = "Report description", Description = "Optional report description displayed in the information panel." });
    Template.Parameters.Add(new Parameter() { Name = "restriction_button", DisplayName = "Display: Show restrictions", BoolValue = true, Description = "If true, the restrictions are displayed when the report is initialized (if the report has prompted restrictions)." });
    Template.Parameters.Add(new Parameter() { Name = "information_button", DisplayName = "Display: Show information", BoolValue = false, Description = "If true, the report shows the information first when the report is initialized." });
    Template.Parameters.Add(new Parameter() { Name = "message_button", DisplayName = "Display: Show messages", BoolValue = false, Description = "If true, the report shows the execution messages first when initialized. The 'Enable execution messages' parameter must be set to true." });
    Template.Parameters.Add(new Parameter() { Name = "display_messages", DisplayName = "Display: Enable execution messages", BoolValue = true, Description = "If true, the execution messages are enabled and can be viewed." });
    Template.Parameters.Add(new Parameter() { Name = "converter_button", DisplayName = "Display: Enable converter menus", BoolValue = true, Description = "If true, the PDF and Excel converter menus are displayed." });
    Template.Parameters.Add(new Parameter() { Name = "restrictions_per_row", DisplayName = "Display: Restrictions per row", NumericValue = 4, Description = "Defines the number of prompted restrictions to be displayed per row (between 1 and 12)." });
    Template.Parameters.Add(new Parameter() { Name = Parameter.PrintLayoutParameter, DisplayName = "Layout: Use print layout", BoolValue = false, Description = "If true, the report result is generated with a print layout." });
    Template.Parameters.Add(new Parameter() { Name = Parameter.PDFLayoutParameter, DisplayName = "Layout: Convert HTML to PDF", BoolValue = false, Description = "If true, the PDF document is always generated and displayed when the report is executed. To be used in conjunction with the 'Use Print Layout' parameter." });
    Template.Parameters.Add(new Parameter() { Name = Parameter.ExcelLayoutParameter, DisplayName = "Layout: Convert to Excel", BoolValue = false, Description = "If true, the Excel document is always generated and displayed when the report is executed." });
    Template.Parameters.Add(new Parameter() { Name = Parameter.DrillEnabledParameter, DisplayName = "Navigation: Drill Enabled", BoolValue = true, Description = "If true, the Drill navigation is enabled." });
    Template.Parameters.Add(new Parameter() { Name = Parameter.SubReportsEnabledParameter, DisplayName = "Navigation: Sub-Reports Enabled", BoolValue = true, Description = "If true, the Sub-Reports navigation is enabled." });
    Template.Parameters.Add(new Parameter() { Name = "force_execution", DisplayName = "Options: Force execution", BoolValue = false, Description = "If true, force the report to be executed directly the first time even if some restrictions are prompted." });
    Template.Parameters.Add(new Parameter() { Name = Parameter.ServerPaginationParameter, DisplayName = "Options: Server Pagination Enabled", BoolValue = true, Description = "If true, data used by HTML data tables pagination are stored on the server." });
    Template.Parameters.Add(new Parameter() { Name = "refresh_rate", DisplayName = "Options: Auto-Refresh (seconds)", Type = ViewParameterType.Numeric, NumericValue = 0, Description = "Value in seconds to re-execute and refresh automatically the report. 0 means no refresh." });
    Template.Parameters.Add(new Parameter() { Name = "force_models_load", DisplayName = "Options: Load all Models", Type = ViewParameterType.Boolean, BoolValue = false, Description = "If true, all models defined in the report will be loaded and processed during execution. By default, false means to load only models belonging to the Views being parsed." });
    Template.Parameters.Add(new Parameter() { Name = "additional_js", DisplayName = "Additional JavaScript", Type = ViewParameterType.Text, Description = "Additional JavaScript inserted at the top of the report result file." });
    Template.Parameters.Add(new Parameter() { Name = "container_fluid", BoolValue = false, DisplayName = "Bootstrap: Main container is fluid", Description = "If true, the main container has a full width , spanning the entire width of the viewport, otherwise the container has a responsive fixed width." });
    Template.Parameters.Add(new Parameter() { Name = "child_container_fluid", BoolValue = false, DisplayName = "Bootstrap: Child container is fluid", Description = "If true, the child container has a full width, spanning the entire width of the viewport, otherwise the container has a responsive fixed width." });

    //Allowed template parent names
    Template.ParentNames = new List<string>();
}