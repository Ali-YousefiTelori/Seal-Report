@using Seal.Model
@using Seal.Helpers
@{
    Report report = Model;
    ReportView view = report.CurrentView;
    Repository repository = report.Repository;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel='shortcut icon' href='@report.AttachImageFile("favicon.ico")' type='image/x-icon' />
    <title>
        @report.ExecutionName
    </title>
    <!--CSS-->
    @Raw(report.AttachCSSFile("bootstrap.min.css", "https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css"))
    @Raw(report.AttachCSSFile("font-awesome.min.css"))
    @Raw(report.AttachCSSFile("bootstrap-select.min.css", "https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.12.4/css/bootstrap-select.min.css"))
    @Raw(report.AttachCSSFile("bootstrap-datetimepicker.min.css", "https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.css"))
    @Raw(report.AttachCSSFile("dataTables.bootstrap.min.css", "https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap.min.css"))
    @Raw(report.AttachCSSFile("responsive.bootstrap.css", "https://cdn.datatables.net/responsive/2.2.1/css/responsive.bootstrap.min.css"))
    @Raw(report.AttachCSSFile("seal.css"))
    @Raw(report.AttachCSSFile("custom.css"))

    <!--Scripts-->
    @Raw(report.AttachScriptFile("jquery.min.js", "https://code.jquery.com/jquery-1.12.3.min.js"))
    @Raw(report.AttachScriptFile("bootstrap.min.js", "https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.min.js"))
    @Raw(report.AttachScriptFile("bootstrap-select.min.js", "https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.12.4/js/bootstrap-select.min.js"))
    @Raw(report.AttachScriptFile("moment.min.js"))
    @if (view.CultureInfo.TwoLetterISOLanguageName != "en")
    {
        @Raw(report.AttachScriptFile("i18n\\moment." + view.CultureInfo.TwoLetterISOLanguageName + ".js"))
        @Raw(report.AttachScriptFile("i18n\\selectpicker." + view.CultureInfo.TwoLetterISOLanguageName + ".min.js"))
    }
    @Raw(report.AttachScriptFile("bootstrap-datetimepicker.min.js"))
    @Raw(report.AttachScriptFile("jquery.dataTables.min.js", "https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"))
    @Raw(report.AttachScriptFile("dataTables.bootstrap.min.js", "https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap.min.js"))
    @Raw(report.AttachScriptFile("dataTables.responsive.min.js", "https://cdn.datatables.net/responsive/2.2.1/js/dataTables.responsive.min.js"))
    @Raw(report.AttachScriptFile("responsive.bootstrap.min.js", "https://cdn.datatables.net/responsive/2.2.1/js/responsive.bootstrap.min.js"))

    @if (report.HasChart)
    {
        @Raw(report.AttachScriptFile("d3.min.js"))
    }

    @if (report.HasChartJSChart)
    {
        @Raw(report.AttachScriptFile("Chart.min.js", "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"))
    }

    @if (report.HasPlotlyChart)
    {
        @Raw(report.AttachScriptFile("plotly-1.34.0.min.js", "https://cdn.plot.ly/plotly-1.34.0.min.js"))
    }

    @if (report.HasNVD3Chart)
    {
        @Raw(report.AttachScriptFile("nv.d3.min.js"))
        @Raw(report.AttachCSSFile("nv.d3.min.css"))
        <script>
            function nvd3TranslateText(text)
            {
                @foreach (RepositoryTranslation translation in repository.Translations.Where(i => i.Context == "NVD3"))
                {
                <text>
                if (text == '@Raw(Helper.ToJS(translation.Reference))') return '@Raw(Helper.ToJS(report.ContextTranslate("NVD3", translation.Reference)))';
                </text>
                }
                return text;
            }
        </script>
        @Raw(report.AttachScriptFile("chartNVD3.js"))
    }

    <script type="text/javascript">
        var generateHTMLDisplay =  @Helper.ToJS(report.GenerateHTMLDisplay);

        var urlPrefix = "@report.WebUrl";
        var executionTimer = null;
        var refreshTimer = null;
        var refreshRate = @view.GetNumericValue("refresh_rate");
        var hasRestrictions = @Helper.ToJS(report.HasRestrictions);
    //    var hasErrors = @Helper.ToJS(report.HasErrors);
        var hasNavigation = @Helper.ToJS(report.HasNavigation && (report.IsNavigating || report.GenerateHTMLDisplay));/*SRKW do not modify*/
      //  var showRestrictions = (hasRestrictions && @Helper.ToJS(view.GetBoolValue("restriction_button")));
        var showInformation = @Helper.ToJS(view.GetBoolValue("information_button") && string.IsNullOrEmpty(report.WebExecutionErrors));
        var showMessage = @Helper.ToJS(view.GetBoolValue("message_button") || !string.IsNullOrEmpty(report.WebExecutionErrors));
        var forceExecution = @Helper.ToJS(view.GetBoolValue("force_execution") || report.HasNavigation);
        var isExecuting = @Helper.ToJS(report.IsExecuting);
        var isCancel = @Helper.ToJS(report.Cancel);
        var printLayout = @Helper.ToJS(report.PrintLayout);

        var rootViewId = '@view.ViewId';

        //text
        var startingExecText = '@report.Translate("Starting execution...")';
        var cancelText = '@report.Translate("Cancel")';
       // var reportCancelledText = '@Raw(report.Translate("Report has been cancelled"))';
       // var backToTopText = '@report.Translate("Back to top")';
       // var allSelectedText = '@report.Translate("All selected")';
       // var countSelectedText = '@report.Translate("# of % selected")';
       // var selectAllText = '@report.Translate("Select all")';

        //formats
    //    var dateSeparator = '@view.CultureInfo.DateTimeFormat.DateSeparator';
        var decimalSeparator = '@view.CultureInfo.NumberFormat.NumberDecimalSeparator';
        //for datepicker
        var languageName = '@view.CultureInfo.TwoLetterISOLanguageName';
        var shortDateFormat = '@Helper.ToMomentJSFormat(view.CultureInfo.DateTimeFormat.ShortDatePattern)';
        var shortDateTimeFormat = '@Helper.ToMomentJSFormat(view.CultureInfo.DateTimeFormat.ShortDatePattern + ' ' + view.CultureInfo.DateTimeFormat.LongTimePattern)';
       // var isUSdate = shortDateFormat.match(/^m/i);
        var thousandSeparator = '@Raw(Helper.ToJS(view.CultureInfo.NumberFormat.NumberGroupSeparator))';
        var currencySymbol = '@Raw(Helper.ToJS(view.CultureInfo.NumberFormat.CurrencySymbol))';

        $.extend( true, $.fn.dataTable.defaults, {
            responsive: true,
            responsive: {
                details: {
                    renderer: function (api, rowIdx, columns) {
                        var data = $.map(columns, function (col, i) {
                            var cellDatas = col.data.split('§', 4);
                            return col.hidden ?
                                '<tr data-dt-row="' + col.rowIndex + '" data-dt-column="' + col.columnIndex + '">' +
                                '<th>' + col.title + ':' + '</th> ' +
                                '<td style="' + cellDatas[1] + '" class="' + cellDatas[2] + '">' + cellDatas[3] + '</td>' +
                                '</tr>' :
                                '';
                        }).join('');

                        return data ?
                            $('<table/>').append(data) :
                            false;
                    }
                }
            },
            columnDefs: [
                { orderable: false, targets: ["firstcell"]}
                @if (report.IsServerPaginationEnabled)
                {
                    <text>,
                    {
                        targets: "_all",
                        createdCell: function(td, cellData, rowData, row, col) {
                            var cellDatas = cellData.split('§', 4);
                            $(td).html(cellDatas[3]);
                            $(td).attr("class", cellDatas[2]);
                            $(td).attr("style", cellDatas[1]);
                            $(td).attr("navigation", cellDatas[0]);
                        }
                    }
                    </text>
                }
            ],
            language: {
                decimal: decimalSeparator,
                thousands: thousandSeparator,
                processing: "@report.Translate("Processing...")",
                lengthMenu: "@report.Translate("Show _MENU_ rows")",
                zeroRecords: "@report.Translate("No row")",
                info: "@report.Translate("Showing _START_ to _END_ of _TOTAL_")",
                infoEmpty: "@report.Translate("Showing 0 to 0 of 0")",
                infoFiltered: "@report.Translate("(filtered from _MAX_)")",
                infoPostFix: "",
                search: "@report.Translate("Filter:")",
                paginate: {
                    first: "|&lt;",
                    previous: "&lt;&lt;",
                    next: ">>",
                    last: ">|"
                }
            },
            pagingType: "full_numbers",
            autoWidth: false,
            stateSave: @Helper.ToJS(!string.IsNullOrEmpty(report.WebUrl)),
            stateSaveCallback: function ( settings, data ) {
                try {
                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
                        'DataTables_'+settings.sInstance+'_Result',
                        JSON.stringify( data ));
                } catch (e) {}
            },
            stateLoadCallback: function ( settings ) {
                try {
                    return JSON.parse(
                        (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
                            'DataTables_'+settings.sInstance+'_Result'
                        ));
                } catch (e) {}
            }
        } );
    </script>
    @Raw(report.AttachScriptFile("common.js"))
    @Raw(report.AttachScriptFile("custom.js"))
    <script>
        @Raw(view.GetValue("additional_js"))
    </script>
</head>
<body>
    @Include(view.GetPartialTemplateKey("Report.iHeader", view), view)

    <div class="container@(view.GetBoolValue("container_fluid") ? "-fluid" : "")">
        <form id="header_form" method="post" action="">
            <input type="hidden" name="execution_guid" id="execution_guid" value="@report.ExecutionGUID" />
            <input type="hidden" name="navigation_id" id="navigation_id" value="" />
            <input type="hidden" name="viewid_tableload" id="viewid_tableload" value="" />
            <input type="hidden" name="pageid_tableload" id="pageid_tableload" value="" />

            <input type="hidden" name="parameter_view_id" id="parameter_view_id" value="" />
            <input type="hidden" name="parameter_view_name" id="parameter_view_name" value="" />
            <input type="hidden" name="parameter_view_value" id="parameter_view_value" value="" />

            <span style="display: none;" id="parameter_tableload"></span>
            @Include(view.GetPartialTemplateKey("Report.iRestrictions", view), view)
        </form>

        <!-- status-->
        @if (report.Cancel)
        {
            <div id="alert_status" class="alert alert-danger" role="alert">
                @Raw(Helper.ToHtml(report.Translate("Report has been cancelled")))
            </div>
        }
        @if (!string.IsNullOrEmpty(report.WebExecutionErrors))
        {
            <div id="alert_status" class="alert alert-danger" role="alert">
                @Raw(Helper.ToHtml(report.WebExecutionErrors)))
            </div>
        }

        <!--progress-->
        <div id="progress_panel" class="panel panel-default hidden">
            <div class="panel-body">
                <div class="progress hidden">
                    <div id="progress_bar" class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%;">
                    </div>
                </div>
                @if (report.ExecutionTasks.Count > 0)
                {
                    <div class="progress hidden">
                        <div id="progress_bar_tasks" class="progress-bar progress-bar-primary progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%;">
                        </div>
                    </div>
                }
                @if (report.ExecutionModels.Count > 0)
                {
                    <div class="progress hidden">
                        <div id="progress_bar_models" class="progress-bar progress-bar-info progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%;">
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="tab-content">
            @Include(view.GetPartialTemplateKey("Report.iViews", view), view)
            @Include(view.GetPartialTemplateKey("Report.iInformation", view), view)
            @Include(view.GetPartialTemplateKey("Report.iMessages", view), view)
        </div>
    </div>

    <!--back to top-->
    <a id="back-to-top" href="#" class="btn btn-warning btn-lg back-to-top" role="button" title="@report.Translate("Back to Top")" data-toggle="tooltip" data-placement="top">
        <span>&#916;</span>
    </a>
</body>
</html>
