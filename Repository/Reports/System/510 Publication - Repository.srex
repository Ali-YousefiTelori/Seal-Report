<?xml version="1.0"?>
<Report xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <GUID>22ea79fc7ee544c787dfd209e47d315b</GUID>
  <ViewGUID>838b9ce2-7276-4af0-b250-d336eceaada0</ViewGUID>
  <InputValues>
    <ReportRestriction>
      <GUID>9082adcd-11bd-43fc-b3c6-4dd9269566a1</GUID>
      <Type>Text</Type>
      <DisplayName>Repository Source Folders</DisplayName>
      <EnumGUID>b3a1f4c6-fae8-4a84-b120-9593fb1c2b9c</EnumGUID>
      <PivotPosition>Row</PivotPosition>
      <TypeEd>Text</TypeEd>
      <EnumGUIDEL>b3a1f4c6-fae8-4a84-b120-9593fb1c2b9c</EnumGUIDEL>
      <Prompt>Prompt</Prompt>
      <OperatorStyle>NotModifiable</OperatorStyle>
      <TypeRe>Text</TypeRe>
      <EnumGUIDRE>b3a1f4c6-fae8-4a84-b120-9593fb1c2b9c</EnumGUIDRE>
    </ReportRestriction>
    <ReportRestriction>
      <GUID>b99502a2-139f-4f3a-adb7-97750c3357d0</GUID>
      <Type>Text</Type>
      <DisplayName>Copy Sub-Folders</DisplayName>
      <DisplayOrder>2</DisplayOrder>
      <EnumGUID>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</EnumGUID>
      <PivotPosition>Row</PivotPosition>
      <TypeEd>Text</TypeEd>
      <EnumGUIDEL>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</EnumGUIDEL>
      <Prompt>PromptOneValue</Prompt>
      <OperatorStyle>NotModifiable</OperatorStyle>
      <DisplayOrderRE>2</DisplayOrderRE>
      <EnumValues>
        <string>Yes</string>
      </EnumValues>
      <TypeRe>Text</TypeRe>
      <EnumGUIDRE>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</EnumGUIDRE>
    </ReportRestriction>
    <ReportRestriction>
      <GUID>f78c5d83-d82e-425f-b381-9ab2221668a0</GUID>
      <Type>Text</Type>
      <DisplayName>Print Current Log File</DisplayName>
      <DisplayOrder>4</DisplayOrder>
      <EnumGUID>bcbee6c9-18d9-4eb7-bba7-76e271c8a38e</EnumGUID>
      <PivotPosition>Row</PivotPosition>
      <TypeEd>Text</TypeEd>
      <EnumGUIDEL>bcbee6c9-18d9-4eb7-bba7-76e271c8a38e</EnumGUIDEL>
      <Prompt>PromptOneValue</Prompt>
      <OperatorStyle>NotModifiable</OperatorStyle>
      <DisplayOrderRE>4</DisplayOrderRE>
      <EnumValues>
        <string>events</string>
      </EnumValues>
      <TypeRe>Text</TypeRe>
      <EnumGUIDRE>bcbee6c9-18d9-4eb7-bba7-76e271c8a38e</EnumGUIDRE>
    </ReportRestriction>
  </InputValues>
  <Sources>
    <ReportSource>
      <GUID>92a001bf-5000-4dfe-b5b6-d86accb65aff</GUID>
      <Name>Main</Name>
      <Connections>
        <MetaConnection>
          <GUID>67ad9065-d857-463d-acf4-923dacd1c053</GUID>
          <Name>connection</Name>
          <ConnectionString>Provider=SQLOLEDB;data source=localhost;initial catalog=adb;Integrated Security=SSPI;</ConnectionString>
        </MetaConnection>
      </Connections>
      <ConnectionGUID>67ad9065-d857-463d-acf4-923dacd1c053</ConnectionGUID>
      <IsNoSQL>true</IsNoSQL>
      <MetaData>
        <Enums>
          <MetaEnum>
            <GUID>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</GUID>
            <Name>YesNo</Name>
            <Values>
              <MetaEV>
                <Id>Yes</Id>
              </MetaEV>
              <MetaEV>
                <Id>No</Id>
              </MetaEV>
            </Values>
          </MetaEnum>
          <MetaEnum>
            <GUID>b3a1f4c6-fae8-4a84-b120-9593fb1c2b9c</GUID>
            <Name>Repository Folders</Name>
          </MetaEnum>
          <MetaEnum>
            <GUID>bcbee6c9-18d9-4eb7-bba7-76e271c8a38e</GUID>
            <Name>Logs</Name>
            <Values>
              <MetaEV>
                <Id>no</Id>
                <Val>No Log</Val>
              </MetaEV>
              <MetaEV>
                <Id>events</Id>
                <Val>Server Events</Val>
              </MetaEV>
              <MetaEV>
                <Id>schedules</Id>
                <Val>Report Scheduler</Val>
              </MetaEV>
              <MetaEV>
                <Id>executions</Id>
                <Val>Report executions</Val>
              </MetaEV>
            </Values>
          </MetaEnum>
        </Enums>
      </MetaData>
    </ReportSource>
  </Sources>
  <Models>
    <ReportModel>
      <GUID>fc05615f-3ba8-4fd3-b87c-c8fbe3bd07dc</GUID>
      <Name>Model</Name>
      <SourceGUID>92a001bf-5000-4dfe-b5b6-d86accb65aff</SourceGUID>
    </ReportModel>
  </Models>
  <Tasks>
    <ReportTask>
      <GUID>ccb62554-63e2-4cbc-9d18-e59099cb573c</GUID>
      <Name>Publish Repository Files</Name>
      <Tasks />
      <ExecProcessChildren>true</ExecProcessChildren>
      <TemplateName>Default</TemplateName>
      <SourceGUID>92a001bf-5000-4dfe-b5b6-d86accb65aff</SourceGUID>
      <Script>@using System.IO
@using FluentFTP
@using System.Security.Authentication
@{
    ReportTask task = Model;
    Report report = task.Report;
    Repository repository = report.Repository;

    //Configure the root repository destination folder:
    var repositoryDestination = "";  // TO BE MODIFIED !
    //repositoryDestination =@"\\wsl$\Ubuntu\seal\Repository"; //For file system (Ubuntu Sub-System)
    //repositoryDestination = "/Repository/"; //FTP root folder
    //repositoryDestination = "/site/wwwroot/Repository/"; //FTP root folder (e.g. for Azure)

    //Uncomment and configure to deploy on a FTP Server
    FtpClient client = null;//new FtpClient(); 
    //client.Host = "Host Name";
    //client.Credentials.UserName = "User Name";
    //client.Credentials.Password = "Password";      //client = new FtpClient("127.0.0.1", "tester", "password"); 
    //client = new FtpClient("waws-prod-dm1-165.ftp.azurewebsites.windows.net", @"sealcore\$sealcore", "password"); //  (e.g. for Azure)

    if (client != null) {
        report.LogMessage("Connecting to '{0}'", client.Host);     
        client.AutoConnect();
        
        /* Or manual configuration:
        client.Config.SslProtocols = SslProtocols.Tls;
        client.Config.ValidateAnyCertificate = true;
        client.Config.DataConnectionType = FtpDataConnectionType.PASV;
        client.Config.DownloadDataType = FtpDataType.Binary;
        client.Config.RetryAttempts = 5;
        client.Config.SocketPollInterval = 1000;
        client.Config.ConnectTimeout = 2000;
        client.Config.ReadTimeout = 2000;
        client.Config.DataConnectionConnectTimeout = 2000;
        client.Config.DataConnectionReadTimeout = 2000;        
        client.Port = 21;
        client.Connect();
        */
    }
    
    if (string.IsNullOrEmpty(repositoryDestination)) {
        throw new Exception("Configure the task first (Edit the 'Publish Repository Files' Task Script): Define at least the Repository Destination Folder...");
    }
    
    var repositoryFolders = report.GetInputValueByName("Repository Source Folders");
    var recursive = report.GetInputValueByName("Copy Sub-Folders").FirstStringValue == "Yes";
    var printLog = report.GetInputValueByName("Print Current Log File").FirstStringValue;
    
    //Repository folders
    var dirs = new Dictionary&lt;string, string&gt;();
    bool reportsDone = false;
    var dest = repositoryDestination;
    if (!dest.EndsWith("/") || dest.EndsWith("\\")) {
        dest += "\\";
    }

    foreach (var folder in repositoryFolders.EnumValues.ToList()) {
        if (folder.StartsWith("re:")) {
            var sourcePath = folder.Substring(3);
            var destPath = dest + Path.GetFileName(folder.Substring(3));
            if (Path.GetFileName(destPath) == "Reports") { reportsDone = true; }
            if (Path.GetFileName(destPath) == "Schedules") { destPath = dest + "SpecialFolders\\" + Path.GetFileName(folder.Substring(3)); }
            dirs.Add(sourcePath, destPath);
        }
        else if (folder.StartsWith("rf:") &amp;&amp; !reportsDone) {
            var sourcePath = repository.ReportsFolder + folder.Substring(3);
            var destPath = dest + "Reports/" + folder.Substring(3);
            dirs.Add(sourcePath, destPath);
        }
    }        

    foreach (var sourcePath in dirs.Keys) {
        var destPath = dirs[sourcePath];
        
        if (client == null) {
            FileHelper.CopyDirectory(sourcePath, destPath, recursive, report, "*");
        }
        else {
            destPath = destPath.Replace("\\","/");
            FileHelper.FtpCopyDirectory(client, sourcePath, destPath, recursive, report);
        }
    } 
    
    if (printLog != "no") {
        report.LogMessage("REMOTE LOG FILE:\r\n");   

        if (client == null) {
            var logPath = string.Format("{0}Logs\\{2}_{1:yyyy_MM_dd}.txt", dest, DateTime.Now, printLog);
            if (!File.Exists(logPath)) {
                report.LogMessage("No remote log file at '{0}'...\r\n", logPath); 
            }
            else {
                report.LogMessage(File.ReadAllText(logPath));
            }
        }
        else {
            var logPath = string.Format("{0}Logs/{2}_{1:yyyy_MM_dd}.txt", dest.Replace("\\","/"), DateTime.Now, printLog);
            if (!client.FileExists(logPath)) {
                report.LogMessage("No remote log file at '{0}'...\r\n", logPath); 
            }
            else {
                var tempFilePath = FileHelper.GetTempUniqueFileName(printLog + ".txt");
                client.DownloadFile(tempFilePath, logPath);
                report.LogMessage(File.ReadAllText(tempFilePath));
            }
        }
    }
    
    if (client != null) { client.Disconnect(); }
}
</Script>
      <SortOrder>1</SortOrder>
    </ReportTask>
  </Tasks>
  <Views>
    <ReportView>
      <GUID>838b9ce2-7276-4af0-b250-d336eceaada0</GUID>
      <Name>View</Name>
      <Views>
        <ReportView>
          <GUID>851ad1bc-ffcb-4b2a-b249-bafcae79bdfd</GUID>
          <Name>Model</Name>
          <Views>
            <ReportView>
              <GUID>0d96e1ea-f99d-4f07-a21a-56b532716871</GUID>
              <Name>Model Container</Name>
              <Views>
                <ReportView>
                  <GUID>d9fb20aa-f1e0-46d1-a1e5-97570d92d8ce</GUID>
                  <Name>Page Table</Name>
                  <TemplateName>Page Table</TemplateName>
                  <SortOrder>1</SortOrder>
                </ReportView>
                <ReportView>
                  <GUID>2860a0c6-c1c4-4599-a7c9-627e62f117bc</GUID>
                  <Name>Chart JS</Name>
                  <TemplateName>Chart JS</TemplateName>
                  <SortOrder>2</SortOrder>
                </ReportView>
                <ReportView>
                  <GUID>5281a22f-b471-4da4-81ba-b06e26b81c61</GUID>
                  <Name>Chart NVD3</Name>
                  <TemplateName>Chart NVD3</TemplateName>
                  <SortOrder>3</SortOrder>
                </ReportView>
                <ReportView>
                  <GUID>b1ea7e27-2149-41d4-8bdc-39b17f46a562</GUID>
                  <Name>Chart Plotly</Name>
                  <TemplateName>Chart Plotly</TemplateName>
                  <SortOrder>4</SortOrder>
                </ReportView>
                <ReportView>
                  <GUID>0ca4b344-6223-43da-8a7c-67c0ddaf3225</GUID>
                  <Name>Data Table</Name>
                  <TemplateName>Data Table</TemplateName>
                  <SortOrder>5</SortOrder>
                </ReportView>
              </Views>
              <TemplateName>Container</TemplateName>
              <SortOrder>1</SortOrder>
            </ReportView>
          </Views>
          <TemplateName>Model</TemplateName>
          <ModelGUID>fc05615f-3ba8-4fd3-b87c-c8fbe3bd07dc</ModelGUID>
          <SortOrder>1</SortOrder>
        </ReportView>
      </Views>
      <TemplateName>Report</TemplateName>
      <Parameters>
        <Parameter>
          <Name>messages_mode</Name>
          <Value>enabledshown</Value>
        </Parameter>
      </Parameters>
      <SortOrder>1</SortOrder>
    </ReportView>
  </Views>
  <InitScript>@using System.IO
@{
    Report report = Model;
	ReportExecutionLog log = report;

    //Check Security: To be adapted to Publish from the Web Report Server itself
    bool allowPublication = false;
    if (report.ExecutionContext == ReportExecutionContext.DesignerReport) {
        allowPublication = true;
    }
    //Or check for a special user or group to allow execution from the Web
    //if (report.SecurityContext != null &amp;&amp; (report.SecurityContext.BelongsToGroup("aGroupName") || report.SecurityContext.UserName = "aUserName")) {
    //    allowPublication = true;
    //}
    if (!allowPublication) {
        log.LogMessage("\r\nWARNING: This report can only be executed from the Report Designer !\r\n");
        throw new Exception("This report can only be executed from the Report Designer");
    }

    //Script executed when the report is initialized
    log.LogMessage("Executing Init Script");
    
    //Fill repository enum
    var foldersEnum = report.Sources[0].MetaData.Enums.FirstOrDefault(i =&gt; i.Name == "Repository Folders");
    if (foldersEnum != null &amp;&amp; foldersEnum.Values.Count == 0) {
        foreach (var folder in Directory.GetDirectories(report.Repository.RepositoryPath))
        {
            var description = "Repository Folder: " + Path.GetFileName(folder);
            if (Path.GetFileName(folder) == "Logs" || Path.GetFileName(folder) == "SpecialFolders") { continue; }
            if (Path.GetFileName(folder) == "Settings") { description += " (Configuration, Translations)"; }
            if (Path.GetFileName(folder) == "Sources") { description += " (Data Sources)"; }
            foldersEnum.Values.Add(new MetaEV() { Id = "re:" + folder, Val = description });
        }
        foldersEnum.Values.Add(new MetaEV() { Id = "re:" + report.Repository.RepositoryPath + "\\SpecialFolders\\Schedules", Val = "Repository Folder: Schedules" });
        
        List&lt;string&gt; choices = new List&lt;string&gt;();
        FileHelper.AddFolderChoices(report.Repository.ReportsFolder, "", choices);
        foreach (var folder in choices) {
            foldersEnum.Values.Add(new MetaEV() { Id = "rf:" + folder, Val = "Report Folder: " + folder  });
        }        
    }
}
</InitScript>
  <Cancel>false</Cancel>
</Report>