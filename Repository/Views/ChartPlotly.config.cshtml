@using Seal.Model;
@{
    ReportViewTemplate Template = Model;

    //Template Name
    Template.Name = ReportViewTemplate.ChartPlotlyName;

    //If true, the view can be configured for a report model
    Template.ForReportModel = false;

    //Parameters for this template
    Template.Parameters.Add(new Parameter() { Name = "ploty_chart_width", TextValue = "500px", DisplayName = "Chart width", Description = "The chart width. If empty, the size is automatic.", Enums = new string[] { "", "300px", "400px", "500px", "600px" }, UseOnlyEnumValues = false });
    Template.Parameters.Add(new Parameter() { Name = "ploty_chart_height", TextValue = "400px", DisplayName = "Chart height", Description = "The chart height. If empty, the size is automatic.", Enums = new string[] { "", "300px", "400px", "500px", "600px" }, UseOnlyEnumValues = false });
    Template.Parameters.Add(new Parameter() { Name = "ploty_chart_title", DisplayName = "Chart title", Description = "Optional title displayed for the Ploty chart. To handle drill navigation, the title can contain element label keyword like '%Label Text%' that will be replaced (e.g. 'Sales per %Order Month%')'." });
    Template.Parameters.Add(new Parameter() { Name = "ploty_xaxis_title", DisplayName = "X Axis title", Description = "Optional title displayed for the X Axis. To handle drill navigation, the title can contain element label keyword like '%Label Text%' that will be replaced (e.g. 'Sales per %Order Month%')'." });
    Template.Parameters.Add(new Parameter() { Name = "ploty_yaxis_title", DisplayName = "Y Axis title", Description = "Optional title displayed for the Y Axis. To handle drill navigation, the title can contain element label keyword like '%Label Text%' that will be replaced (e.g. 'Sales per %Order Month%')'." });
    Template.Parameters.Add(new Parameter() { Name = "ploty_show_legend", DisplayName = "Show legend", BoolValue = true, Description = "If true, the legend is displayed in the chart." });
    Template.Parameters.Add(new Parameter() { Name = "ploty_legend_position", DisplayName = "Legend position", Value = "", Description = "If specified, defines the x and y positions of the legend in normalized coordinates. The values must be between -2 and 3.", Enums = new string[] { "", "x:1.02,y:1,", "x:0,y:0,", "x:0.5,y:1," }, UseOnlyEnumValues = false });
    Template.Parameters.Add(new Parameter() { Name = "ploty_legend_orientation", DisplayName = "Legend orientation", Description = "The orientation of the legend in the chart. Either Vertical or Horizonzal.", Value = "v", Enums = new string[] { "v|Vertical", "h|Horizontal" } });
    Template.Parameters.Add(new Parameter() { Name = "ploty_bar_stacked", DisplayName = "Bar: Is stacked", BoolValue = true, Description = "If true, the bars in the chart are stacked (only for Bar chart)." });
    Template.Parameters.Add(new Parameter() { Name = "ploty_bar_orientation", DisplayName = "Bar: Orientation", Description = "The orientation of the bars in the chart. Either Vertical or Horizonzal.", Value = "v", Enums = new string[] { "v|Vertical", "h|Horizontal" } });
    Template.Parameters.Add(new Parameter() { Name = "ploty_scatter_mode", DisplayName = "Scatter: Mode", Value = "", Description = "Determines the drawing mode for this scatter trace. Any combination of 'lines', 'markers', 'text' joined with a ' + ' OR 'none'. If empty and there are less than 20 points, then the default is 'lines + markers'. Otherwise, 'lines'.", Enums = new string[] { "", "lines", "markers", "lines+markers", "lines+markers+text", "none" }, UseOnlyEnumValues = false });
    Template.Parameters.Add(new Parameter() { Name = "plotly_pie_hoverinfo", DisplayName = "Pie: Hover label", Value = "all", Description = "Determines which trace information appear on hover. Any combination of 'label', 'text', 'value', 'percent', 'name' joined with a ' + ' OR 'all' or 'none' or 'skip'.", Enums = new string[] { "all", "label", "text", "label+text", "label+text+value", "none" }, UseOnlyEnumValues = false });
    Template.Parameters.Add(new Parameter() { Name = "ploty_pie_hole", DisplayName = "Pie: Hole for doughnut", Value = "0.4", Description = "Fraction of the radius to cut out of the pie. Use this to make a donut chart. The values must be between 0 and 1.", Enums = new string[] { "0", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8" }, UseOnlyEnumValues = false });

    //Allowed template parent names
    Template.ParentNames = new List<string>() { "Model HTML", "Model Container" };
}
  