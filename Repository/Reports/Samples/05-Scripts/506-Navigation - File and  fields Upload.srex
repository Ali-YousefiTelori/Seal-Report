<?xml version="1.0" encoding="utf-8"?>
<Report xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <CurrentViewGUID>47088ad2-fe61-4509-9909-ccf5f5827fe9</CurrentViewGUID>
  <GUID>0ef51e095206405688b9eb8f10202003</GUID>
  <ViewGUID>47088ad2-fe61-4509-9909-ccf5f5827fe9</ViewGUID>
  <Sources>
    <ReportSource>
      <GUID>2d8d60b6-e1d3-459a-91f6-c03693ae55ea</GUID>
      <Name>Northwind (Repository)</Name>
      <ConnectionGUID>1</ConnectionGUID>
      <MetaData />
      <MetaSourceGUID>52833575-11ae-4b7d-8b5e-0f9b29d1267a</MetaSourceGUID>
    </ReportSource>
  </Sources>
  <Models>
    <ReportModel>
      <GUID>d826ff6e-821a-4834-aab8-d50ec18a6024</GUID>
      <Name>model</Name>
      <SourceGUID>2d8d60b6-e1d3-459a-91f6-c03693ae55ea</SourceGUID>
      <FinalScript>@using System.Data
@{
    ReportModel model = Model;
 	ReportExecutionLog log = model.Report;

    log.LogMessage("Modifying result values with the 'Final Script'...");
        
    var helper = new TaskDatabaseHelper();
    //Get the photos
    var photos = helper.LoadDataTable(model.Connection.ConnectionType, model.Connection.FullConnectionString, "select employeeID, photo from employees");

    foreach (ResultPage page in model.Pages)
    {
        ResultTable dataTable = page.DataTable;
        foreach(var line in dataTable.Lines) {
            foreach (DataRow row in photos.Rows) {
                if (row["employeeID"].ToString() == line[0].Value.ToString()) {
                    //Set the final value in the third cell
                    var bytes = GetImageBytesFromOLEField((byte[]) row["photo"]);
                    line[2].FinalValue =  "&lt;img src='data:image/bmp;base64," + Convert.ToBase64String(bytes, Base64FormattingOptions.None) + "' style='width:50px;height=50px' /&gt;";
                    break;
                }
            }
        }
    }


}
</FinalScript>
      <Elements>
        <ReportElement>
          <GUID>84479e3d-bdea-4a3f-bbc0-3242cfda0de5</GUID>
          <Name>Products.CategoryID</Name>
          <DisplayName />
          <PivotPosition>Row</PivotPosition>
          <AggregateFunction>Count</AggregateFunction>
          <MetaColumnGUID>f1ca9f05-b6a3-46da-b753-68cb4056cb66</MetaColumnGUID>
        </ReportElement>
      </Elements>
      <Restriction>[79ed1abf-010a-42d7-9b4b-d7157b879a56]
AND [06a2ff61-513e-4d8d-add5-88d2eb62d401]</Restriction>
      <Restrictions>
        <ReportRestriction>
          <GUID>79ed1abf-010a-42d7-9b4b-d7157b879a56</GUID>
          <Name>Orders.OrderDate</Name>
          <DisplayName />
          <Format>d</Format>
          <PivotPosition>Row</PivotPosition>
          <AggregateFunction>Max</AggregateFunction>
          <TotalAggregateFunction>Max</TotalAggregateFunction>
          <MetaColumnGUID>4a3f4d69-3781-4679-8797-f425478de0d9</MetaColumnGUID>
          <Prompt>PromptOneValue</Prompt>
          <Date1Keyword>Today</Date1Keyword>
          <FormatRe>d</FormatRe>
        </ReportRestriction>
        <ReportRestriction>
          <GUID>06a2ff61-513e-4d8d-add5-88d2eb62d401</GUID>
          <Name>Products.CategoryID</Name>
          <DisplayName />
          <DisplayOrder>2</DisplayOrder>
          <PivotPosition>Row</PivotPosition>
          <AggregateFunction>Count</AggregateFunction>
          <MetaColumnGUID>f1ca9f05-b6a3-46da-b753-68cb4056cb66</MetaColumnGUID>
          <Prompt>Prompt</Prompt>
          <DisplayOrderRE>2</DisplayOrderRE>
          <EnumValues>
            <string>1</string>
            <string>3</string>
            <string>5</string>
            <string>8</string>
          </EnumValues>
        </ReportRestriction>
      </Restrictions>
    </ReportModel>
  </Models>
  <CommonScripts>
    <CommonScript>
      <Name>GetImageBytesFromOLEField</Name>
      <Script>@using System
@using System.IO

@functions 
{
    byte[] GetImageBytesFromOLEField(byte[] oleFieldBytes)
    {
        const string BITMAP_ID_BLOCK = "BM";
        const string JPG_ID_BLOCK = "\u00FF\u00D8\u00FF";
        const string PNG_ID_BLOCK = "\u0089PNG\r\n\u001a\n";
        const string GIF_ID_BLOCK = "GIF8";
        const string TIFF_ID_BLOCK = "II*\u0000";
        byte[] imageBytes;
        // Get a UTF7 Encoded string version
        var u8 = System.Text.Encoding.UTF8;
        string strTemp = u8.GetString(oleFieldBytes);
        // Get the first 300 characters from the string
        string strVTemp = strTemp.Substring(0, 300);
        // Search for the block
        int iPos = -1;
        if (strVTemp.IndexOf(BITMAP_ID_BLOCK) != -1)
            iPos = strVTemp.IndexOf(BITMAP_ID_BLOCK);
        else if (strVTemp.IndexOf(JPG_ID_BLOCK) != -1)
            iPos = strVTemp.IndexOf(JPG_ID_BLOCK);
        else if (strVTemp.IndexOf(PNG_ID_BLOCK) != -1)
            iPos = strVTemp.IndexOf(PNG_ID_BLOCK);
        else if (strVTemp.IndexOf(GIF_ID_BLOCK) != -1)
            iPos = strVTemp.IndexOf(GIF_ID_BLOCK);
        else if (strVTemp.IndexOf(TIFF_ID_BLOCK) != -1)
            iPos = strVTemp.IndexOf(TIFF_ID_BLOCK);
        else
            throw new Exception("Unable to determine header size for the OLE Object");
        // From the position above get the new image
        if (iPos == -1) {
            throw new Exception("Unable to determine header size for the OLE Object");
        }
        imageBytes = new byte[oleFieldBytes.LongLength - iPos];
        MemoryStream ms = new MemoryStream();
        ms.Write(oleFieldBytes, iPos, oleFieldBytes.Length - iPos);
        imageBytes = ms.ToArray();
        ms.Close();
        ms.Dispose();
        return imageBytes;
    }
}</Script>
    </CommonScript>
  </CommonScripts>
  <Views>
    <ReportView>
      <GUID>47088ad2-fe61-4509-9909-ccf5f5827fe9</GUID>
      <Name>view</Name>
      <Views>
        <ReportView>
          <GUID>47c62c87-49e8-40a8-bf64-a4c80562a0ec</GUID>
          <Name>model</Name>
          <Views>
            <ReportView>
              <GUID>d5f736e5-d0dd-447b-9ff8-e3f6dbcb43f8</GUID>
              <Name>Model Container</Name>
              <Views>
                <ReportView>
                  <GUID>3d58d427-f027-47f6-b399-2514c1d1ae6e</GUID>
                  <Name>Page Table</Name>
                  <TemplateName>Page Table</TemplateName>
                  <SortOrder>1</SortOrder>
                </ReportView>
                <ReportView>
                  <GUID>5fd4cf1e-24a5-49a8-8d3f-ee982d4da323</GUID>
                  <Name>Chart JS</Name>
                  <TemplateName>Chart JS</TemplateName>
                  <Parameters>
                    <Parameter>
                      <Name>chartjs_unit</Name>
                      <Value>second</Value>
                    </Parameter>
                  </Parameters>
                  <SortOrder>2</SortOrder>
                </ReportView>
                <ReportView>
                  <GUID>1272c3ef-b837-473b-9d1e-f128bc591ae3</GUID>
                  <Name>Chart NVD3</Name>
                  <TemplateName>Chart NVD3</TemplateName>
                  <SortOrder>3</SortOrder>
                </ReportView>
                <ReportView>
                  <GUID>700f6e09-f5da-4d2a-9a63-ff929d434714</GUID>
                  <Name>Chart Plotly</Name>
                  <TemplateName>Chart Plotly</TemplateName>
                  <SortOrder>4</SortOrder>
                </ReportView>
                <ReportView>
                  <GUID>362b1be2-611b-4d3b-bf22-b237de48f4e0</GUID>
                  <Name>Data Table</Name>
                  <TemplateName>Data Table</TemplateName>
                  <Parameters>
                    <Parameter>
                      <Name>columns_hidden</Name>
                      <Value>1</Value>
                    </Parameter>
                  </Parameters>
                  <SortOrder>5</SortOrder>
                </ReportView>
              </Views>
              <TemplateName>Container</TemplateName>
              <SortOrder>1</SortOrder>
            </ReportView>
          </Views>
          <TemplateName>Model</TemplateName>
          <ModelGUID>d826ff6e-821a-4834-aab8-d50ec18a6024</ModelGUID>
          <SortOrder>3</SortOrder>
        </ReportView>
        <ReportView>
          <GUID>90d1b2de-768b-4770-b34d-7d15e8c87012</GUID>
          <Name>Restrictions</Name>
          <TemplateName>Restrictions</TemplateName>
          <RestrictionsGUID>
            <string>79ed1abf-010a-42d7-9b4b-d7157b879a56</string>
            <string>06a2ff61-513e-4d8d-add5-88d2eb62d401</string>
          </RestrictionsGUID>
          <UseCustomTemplate>true</UseCustomTemplate>
          <CustomTemplate>@using Seal.Model
@{
    Report report = Model;
    ReportView view = report.CurrentView;
}

@if (report.GenerateHTMLDisplay)
{
&lt;form id="download_form" execguid="@report.ExecutionGUID" method="post" action="ActionUploadFile" enctype="multipart/form-data"  target_window="@view.GetValue("target_window")" style="padding-top:5px"&gt;
    &lt;input type="hidden" name="execution_guid_trigger" id="execution_guid_trigger" value="@report.ExecutionGUID" /&gt;
    &lt;input type="hidden" name="execution_guid" id="execution_guid" value="@report.ExecutionGUID" /&gt;
    &lt;input type="hidden" name="navigation_id" id="navigation_id" value="@report.GetReportNavigationScriptLink()" /&gt;
    &lt;input type="hidden" name="navigation_parameters" id="navigation_parameters"/&gt;
    &lt;input type="hidden" name="form_id" id="form_id" value="form_@view.IdSuffix" /&gt;
    @Include(view.GetPartialTemplateKey("Restrictions.iShared", view), view)

    &lt;div style="position:relative;"&gt;
        &lt;a class='btn btn-primary' href='javascript:;' style='margin-left: 15px;'&gt;
            Choose File to upload to the Web Server...
            &lt;input type="file" style='position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";opacity:0;background-color:transparent;color:transparent;' name="file_source" size="40"  onchange='$("#upload-file-info").html($(this).val());'&gt;
        &lt;/a&gt;
        &amp;nbsp;
        &lt;span class='label label-info' id="upload-file-info"&gt;&lt;/span&gt;
    &lt;/div&gt;

        
    @if (view.ExecutionPromptedRestrictions.Exists(i =&gt; !i.TriggerExecution))
    {
        &lt;div class="text-right container@(report.ExecutionView.GetBoolValue("container_fluid") ? "-fluid" : "")" style="margin-top:-20px"&gt;
            &lt;div class="row"&gt;
                &lt;div class="col-sm-12"&gt;
                    &lt;button id="submit_button" class="btn btn-success"&gt;Upload file and data&lt;/button&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    }
&lt;/form&gt;

&lt;div id="html_div"&gt;&lt;/div&gt;

&lt;script&gt;
$(document).ready(function () {
    $('#download_form').submit(function(e) {
        e.preventDefault(); // stop the standard form submission
        $.ajax({
            url: _urlPrefix + "ActionNavigate",
            type: this.method,
            data: new FormData(this),
            cache: false,
            contentType: false,
            processData: false,
            success: function (data) {
                $("#html_div").html(data);
            },
            error: function(xhr, error, status) {
                console.log(error, status);
            }
        });
    });
});
&lt;/script&gt;
}
</CustomTemplate>
          <Parameters>
            <Parameter>
              <Name>restrictions_per_row</Name>
              <Value>2</Value>
            </Parameter>
          </Parameters>
          <SortOrder>2</SortOrder>
        </ReportView>
        <ReportView>
          <GUID>4c8e18a7-9702-44a9-884d-b489ccb06183</GUID>
          <Name>Highlights</Name>
          <TemplateName>Free</TemplateName>
          <UseCustomTemplate>true</UseCustomTemplate>
          <CustomTemplate>&lt;p&gt;
&lt;b&gt;Highlights:&lt;/b&gt;&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;This report demonstrates how to upload input values and/or file to the Web Report Server.&lt;/li&gt;
&lt;li&gt;Custom 'Restrictions' views to define the input fields and button, plus event handlers.&lt;/li&gt;
&lt;li&gt;'Report Navigation Script' in General to process the navigation: get the restriction values and the file to upload&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
</CustomTemplate>
          <SortOrder>1</SortOrder>
        </ReportView>
      </Views>
      <TemplateName>Report</TemplateName>
      <SortOrder>0</SortOrder>
    </ReportView>
  </Views>
  <NavigationScript>@using System.Web
@{
    NavigationLink link = Model;
    Report report = link.Report;

    //Script executed for a report navigation...
    var parameters = "Parameters and Request:\r\n";
    if (link.Parameters != null) {
        foreach (var k in  link.Parameters.AllKeys) {
            parameters += string.Format("Parameter {0}={1}\r\n", k, link.Parameters[k]);
        }
    }
    
    if (link.Request != null) {
        foreach (var k in  link.Request.Form.Keys) {
            parameters += string.Format("Form {0}={1}\r\n", k, link.Request.Form[k]);
        }
        parameters += string.Format("{0} File(s)\r\n", link.Request.Form.Files.Count);
    }
    
    var result = "";
    //result = parameters; //uncomment to check all parameters
    
    //Get date value
    var dateRestriction = report.Models[0].Restrictions.FirstOrDefault(i =&gt; i.MetaColumn.Name == "Orders.OrderDate");
    var dateValue = "";
    if (dateRestriction != null) {
        dateValue = link.Request.Form[dateRestriction.ValueHtmlId+ "_1"] + "\r\n";
        result += "Date: " + dateValue;
    }

    //Get categories
    var categoryRestriction = report.Models[0].Restrictions.FirstOrDefault(i =&gt; i.MetaColumn.Name == "Products.CategoryID");
    var categoryValues = "";
    if (categoryRestriction != null) {
        foreach (var option in link.Request.Form[categoryRestriction.OptionValueHtmlId].ToString().Split(',')) {
            var val = categoryRestriction.MetaEnumValuesRE.FirstOrDefault(i =&gt; categoryRestriction.OptionHtmlId + i.HtmlId == option);
            if (val != null) {
                categoryValues += string.Format("{0} ({1});", val.Val, val.Id);
            }
        }
        result += "Category: " + categoryValues;
    }
    
    if (link.Request != null &amp;&amp; link.Request.Form.Files != null &amp;&amp; link.Request.Form.Files.Count &gt; 0) {
        var file = link.Request.Form.Files[0];
        if (file != null &amp;&amp; !string.IsNullOrEmpty(file.FileName)) {
            //Saving the file
            var path = FileHelper.GetTempUniqueFileName(file.FileName);
            using (var stream = System.IO.File.Create(path))
            {
                await file.CopyToAsync(stream);
            }
            result += "File uploaded and saved in " + path;
        }
    }
    
    link.ScriptResult = result.Replace("\r\n","&lt;br&gt;");
}
</NavigationScript>
  <Cancel>false</Cancel>
</Report>