@using Seal.Model
@using Seal.Renderer
@{
    Report report = Model;
    ReportView view = report.CurrentView;
    ReportModel model = view.Model;

    ExcelRenderer renderer = view.ExcelRenderer;
    ExcelResult result = report.ExcelResult;

    if (renderer.GetBoolValue("new_sheet")) result.AddWorksheet(view.ViewName);

    //Summary
    if (model.SummaryTable != null && model.SummaryTable.RowCount > 0 && view.GetBoolValue("show_summary_table", true))
    {
        bool displayFormat = renderer.GetBoolValue("use_display_format");
        bool cellStyles = renderer.GetBoolValue("use_display_format");
        bool displayTotals = view.GetBoolValue("display_summary_totals");
        summaryRows(result, model, 0, 1, displayFormat, cellStyles, displayTotals);
        summaryRows(result, model, model.SummaryTable.BodyStartRow, model.SummaryTable.BodyEndRow, displayFormat, cellStyles, displayTotals);
        if (view.GetBoolValue("add_summary_totals_totals") && displayTotals && model.HasTotals)
        {
            summaryRows(result, model, model.SummaryTable.BodyEndRow, model.SummaryTable.RowCount, displayFormat, cellStyles, displayTotals);
        }
        result.CurrentRow++;
    }

    
    var jsView = view.FindViewFromTemplate(ReportViewTemplate.ChartJSName);
    if (jsView == null)
    {
        //Add a chart JS view for Excel rendering
        ReportView chartView = view.FindViewFromTemplate(ReportViewTemplate.ChartScottplotName);
        if (chartView == null) chartView = view.FindViewFromTemplate(ReportViewTemplate.ChartNVD3Name);
        if (chartView == null) chartView = view.FindViewFromTemplate(ReportViewTemplate.ChartPlotlyName);
        if (chartView != null) {
            var newView = report.AddChildView(chartView.ParentView, ReportViewTemplate.ChartJSName);
            newView.SortOrder = chartView.SortOrder;
        }
    }

    foreach (ResultPage page in model.Pages)
    {
        if (model.Pages.Count > 1 && renderer.GetBoolValue("new_sheet_page")) result.AddWorksheet(page.PageName);

        report.CurrentPage = page;
        view.ParseChildren();
    }
}


@functions {
    void summaryRows(ExcelResult result, ReportModel model, int rowStart, int rowEnd, bool displayFormat, bool cellStyles, bool displayTotals)
    {
        for (int row = rowStart; row < rowEnd; row++)
        {
            result.CurrentCol = 1;
            for (int col = 0; col < model.SummaryTable.ColumnCount; col++)
            {
                var cell = model.SummaryTable[row, col];
                if (!displayTotals && (cell.IsTotal || cell.IsTotalTotal)) continue;

                result.SetValue(model.SummaryTable[row, col], displayFormat, cellStyles);
                result.CurrentCol++;
            }
            result.CurrentRow++;
        }
    }
}