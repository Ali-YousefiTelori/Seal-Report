@using Seal.Model
@using Seal.Helpers

@{
    Report report = Model;
    ReportView view = report.CurrentView;
    ReportView modelView = report.CurrentModelView;
    ReportModel reportModel = modelView.Model;
    ResultPage page = report.CurrentPage;
}

@if (reportModel.HasChartJSSerie && modelView.GetBoolValue("show_charts"))
{
    <!--Chart JS-->
    bool chartOk = false;
    string chartId = "cjs" + Guid.NewGuid().ToString().Replace("-", "");
    if (modelView.InitPageChart(page))
    {
        string chartType = reportModel.ExecChartJSType;
        if (chartType == "pie" && view.GetBoolValue("chartjs_doughnut"))
        {
            chartType = "doughnut";
        }
        else if (chartType == "bar" && view.GetBoolValue("chartjs_bar_horizontal"))
        {
            chartType = "horizontalBar";
        }
        <canvas id="@chartId" @Raw(Helper.AddIfNotEmpty("width='", view.GetValue("chartjs_width"), "'")) @Raw(Helper.AddIfNotEmpty("height='", view.GetValue("chartjs_height"), "'"))></canvas>

        <script>
            var ctx = $("#@chartId");
            var colors = d3.scale.category@((reportModel.ExecChartJSType == "pie" || reportModel.ExecChartJSType == "polarArea" ? page.PrimaryXDimensions.Count : page.Series.Count) <= 10 ? "1" : "2")0().range();
            var data = {
                labels: [@Raw(page.ChartXLabels)],
                navigations: [@Raw(page.ChartNavigations)],
                datasets: [
                    @foreach (ResultSerie serie in page.Series)
                    {
                        <text>
                    {
                        @Raw(reportModel.ExecChartJSType != "pie" && reportModel.ExecChartJSType != "polarArea" && reportModel.ExecChartJSType != "radar" ? "type: '" + serie.Element.ChartJSSerie.ToString().ToLower() + "'," : "")
                        labels: [@Raw(page.ChartXLabels)],
                        label: '@Raw(Helper.ToJS(serie.SerieDisplayName))',
                        data: [@Raw(reportModel.ExecChartJSType == "pie" || reportModel.ExecChartJSType == "polarArea" || reportModel.ExecChartJSType == "radar" ? serie.ChartYSerieValues : serie.ChartXYSerieValues)],
                        borderColor: colors@(reportModel.ExecChartJSType == "pie" || reportModel.ExecChartJSType == "polarArea" ? "" : "[" + page.Series.IndexOf(serie) + "]"),
                        backgroundColor: colors@(reportModel.ExecChartJSType == "pie" || reportModel.ExecChartJSType == "polarArea" ? "" : "[" + page.Series.IndexOf(serie) + "]"),
                        borderWidth: 1,
                        steppedLine: @Raw(view.GetValue("chartjs_stepped_line")),
                        fill: @Raw(view.GetValue("chartjs_fill")),
                        yAxisID: 'yaxis-@(serie.Element.YAxisType == AxisType.Secondary ? 2 : 1)'
                    },
                        </text>
                    }
                ]
            };
            var options = {
                responsive: true,
                legend: {
                    display: @Helper.ToJS(view.GetBoolValue("chartjs_show_legend")),
                    position: '@view.GetValue("chartjs_legend_position")'
                },
                title: {
                    display: @Raw(Helper.ToJS(!string.IsNullOrEmpty(view.GetValue("chartjs_title")))),
                    text: '@Raw(Helper.ToJS(modelView.GetTranslatedMappedLabel(view.GetValue("chartjs_title"))))',
                    position: '@view.GetValue("chartjs_title_position")'
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItem, data) {
                            var allData = data.datasets[tooltipItem.datasetIndex].data;
                            var tooltipLabel = data.labels[tooltipItem.index];
                            var tooltipData = allData[tooltipItem.index];
                            var format = (data.datasets[tooltipItem.datasetIndex].yAxisID == 'yaxis-2' ? '@reportModel.ExecD3SecondaryYAxisFormat' : '@reportModel.ExecD3PrimaryYAxisFormat');
                            @if (reportModel.ExecChartJSType == "pie" || reportModel.ExecChartJSType == "polarArea")
                            {
                                <text>
                                var total = 0;
                                for (var i in allData) {
                                    total += allData[i];
                                }
                                var tooltipPercentage = Math.round((tooltipData / total) * 100);
                                return tooltipLabel + ': ' + d3.format(format)(Number(tooltipData)).valueFormat() + ' (' + tooltipPercentage + '%)';
                                </text>
                            }
                            else if (reportModel.ExecChartJSType == "scatter")
                            {
                                <text>
                                return data.labels[tooltipItem.index] + ': ' + d3.format(format)(Number(tooltipItem.yLabel)).valueFormat();
                                </text>
                            }
                            else
                            {
                                <text>
                                return  d3.format(format)(Number(tooltipItem.yLabel)).valueFormat();
                                </text>
                            }
                        }
                    }
                },
                @if (reportModel.ExecChartJSType != "pie" && reportModel.ExecChartJSType != "polarArea" && reportModel.ExecChartJSType != "radar")
                {
                <text>
                scales: {
                    xAxes: [{
                        stacked: @Helper.ToJS(reportModel.ExecChartJSType == "bar" && view.GetBoolValue("chartjs_bar_stacked")),
                        @if (reportModel.ExecChartIsDateTimeAxis) {
                            <text>
                                    type: 'time',
                                    time: {
                                        format: '@reportModel.ExecMomentJSXAxisFormat',
                                        tooltipFormat: '@reportModel.ExecMomentJSXAxisFormat',
                                        displayFormats: {
                                            'second': '@reportModel.ExecMomentJSXAxisFormat',
                                            'minute': '@reportModel.ExecMomentJSXAxisFormat',
                                            'hour': '@reportModel.ExecMomentJSXAxisFormat',
                                            'day': '@reportModel.ExecMomentJSXAxisFormat',
                                            'week': '@reportModel.ExecMomentJSXAxisFormat',
                                            'month': '@reportModel.ExecMomentJSXAxisFormat',
                                            'quarter': '@reportModel.ExecMomentJSXAxisFormat',
                                            'year': '@reportModel.ExecMomentJSXAxisFormat',
                                        }
                                    }
                            </text>
                            }
                        }],
                    yAxes: [
                        @if (reportModel.HasPrimaryYAxis) {
                            <text>
                                {
                                id: 'yaxis-1',
                                stacked: @Helper.ToJS(reportModel.ExecChartJSType == "bar" && view.GetBoolValue("chartjs_bar_stacked")),
                                ticks: {
                                    callback: function (label, index, labels) {
                                        if (@Helper.ToJS(reportModel.ExecAxisPrimaryYIsDateTime)) return d3.time.format('@reportModel.ExecD3PrimaryYAxisFormat')(new Date(label));
                                        return d3.format('@reportModel.ExecD3PrimaryYAxisFormat')(label).valueFormat();
                                        }
                                    }
                                },
                            </text>
                        }
                        @if (reportModel.HasSecondaryYAxis) {
                            <text>
                                {
                                id: 'yaxis-2',
                                position: 'right',
                                ticks: {
                                    callback: function(label, index, labels) {
                                        if (@Helper.ToJS(reportModel.ExecAxisSecondaryYIsDateTime)) return d3.time.format('@reportModel.ExecD3SecondaryYAxisFormat')(new Date(label));
                                        return d3.format('@reportModel.ExecD3SecondaryYAxisFormat')(label).valueFormat();
                                        }
                                    }
                                },
                            </text>
                        }
                    ]
                }
                </text>
                }
            };


            var @chartId = new Chart(ctx, {
                type: '@chartType',
                data: data,
                options: options
            });
            /* Naviagation
            $("#@chartId").click(
                function (evt) {
                    var activePoints = @(chartId).getElementsAtEvent(evt);
                    if (activePoints && activePoints.length > 0) {
                        var index = activePoints[0]["_index"];
                        var label = @(chartId).data.labels[index];
                        var value = @(chartId).data.datasets[0].data[index];
                       var nav = @(chartId).data.navigations[index];
                       if (nav) showPopupNavMenu(evt, nav, true);
                    }
                }
            );*/
        </script>
        chartOk = true;
    }
    if (!chartOk)
    {
        <div id="alert_status" class="alert alert-danger" role="alert">
            @Raw(Helper.ToHtml(view.Error))
        </div>
        view.Error = "";
    }
}
