@using Seal.Model;
@{
    ReportTask task = Model;

    task.TemplateDescription = "Execute a report. If set, the task Input Object can be used as the report file path.";

    //Parameters for this task
    task.Parameters.Add(new Parameter() { Name = "report_path", Value = "", DisplayName = "Report file path", Description = "The report file path (*.srex). The path can contain the '%SEALREPOSITORY%' keyword to specify the repository path.", Enums = new string[] { @"%SEALREPOSITORY%/Reports/Overview - Sales.srex" }, UseOnlyEnumValues = false });
    task.Parameters.Add(new Parameter() { Name = "output_directory", Value = "", DisplayName = "Output directory", Description = "If not empty, the report result is saved in the report output directory. The path can contain the '%SEALREPOSITORY%' keyword to specify the repository path.", Enums = new string[] { @"%SEALREPOSITORY%/Reports" }, UseOnlyEnumValues = false });

    task.Script = @"@using System.Threading
@using System.IO
@{
    ReportTask task = Model;
    var repository = task.Repository;
    var input = task.ExecInput as string; //use input if any
    var reportPath = input;
    if (string.IsNullOrEmpty(reportPath)) {
        reportPath = repository.ReplaceRepositoryKeyword(task.GetValue(""report_path""));
    }
    var outputDirectory = repository.ReplaceRepositoryKeyword(task.GetValue(""output_directory""));

    Report report = Report.LoadFromFile(reportPath, task.Repository);
    report.ExecutionInitiator = task.Report;
    if (!string.IsNullOrEmpty(report.LoadErrors)) {
        task.LogMessage($""Error loading the report {reportPath}: {report.LoadErrors}"");
        task.Report.Cancel = true;
        return;
    }
    if (!string.IsNullOrEmpty(outputDirectory)) {
        Directory.CreateDirectory(outputDirectory);
		var folderDevice = repository.Devices.First(i => i is OutputFolderDevice);
		var output = report.AddOutput(folderDevice);
		output.FolderPath = outputDirectory;
		report.OutputToExecute = output;
    }

	task.Report.LogMessage($""Executing report '{reportPath}'"");
	ReportExecution execution = new ReportExecution() { Report = report };		
	execution.Execute();	
	while (!task.Report.Cancel && report.Status != ReportStatus.Executed && !report.HasErrors && !report.Cancel) {
		Thread.Sleep(500);
	}
}
";

    task.BodyScript = ReportTask.BodyScriptTemplate;
}
