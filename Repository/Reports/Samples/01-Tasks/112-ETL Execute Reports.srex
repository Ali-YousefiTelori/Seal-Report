<?xml version="1.0"?>
<Report xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <GUID>4ded5db7b4934f0bbf80c83de09809e1</GUID>
  <ViewGUID>5c0ae5cc-8664-4771-8464-e4df51c51891</ViewGUID>
  <Sources>
    <ReportSource>
      <GUID>fa1f9673-27d7-43fb-89d8-ab42003477bb</GUID>
      <Name>Northwind (Repository)</Name>
      <ConnectionGUID>442f6511-a22b-47ec-a33e-e1c7344adb68</ConnectionGUID>
      <MetaData />
      <MetaSourceGUID>52833575-11ae-4b7d-8b5e-0f9b29d1267a</MetaSourceGUID>
    </ReportSource>
  </Sources>
  <Models>
    <ReportModel>
      <GUID>dee2b1be-a8ad-4e20-bf75-75f14040f435</GUID>
      <Name>Model</Name>
      <SourceGUID>fa1f9673-27d7-43fb-89d8-ab42003477bb</SourceGUID>
    </ReportModel>
  </Models>
  <Tasks>
    <ReportTask>
      <GUID>dcf91707-2b8d-4191-a477-16fec2fe466a</GUID>
      <Name>Loop</Name>
      <Tasks>
        <ReportTask>
          <GUID>141ab784-60cd-4991-ae22-2f28ffc6fc3a</GUID>
          <Name>Execute Report</Name>
          <Tasks />
          <TemplateName>Execute Report</TemplateName>
          <Parameters>
            <Parameter>
              <Name>output_directory</Name>
              <Value>%SEALREPOSITORY%/Databases/Loaded</Value>
            </Parameter>
          </Parameters>
          <SourceGUID>fa1f9673-27d7-43fb-89d8-ab42003477bb</SourceGUID>
          <SortOrder>1</SortOrder>
        </ReportTask>
      </Tasks>
      <TemplateName>Loop</TemplateName>
      <Parameters>
        <Parameter>
          <Name>folder</Name>
          <Value>%SEALREPOSITORY%/Reports/Samples</Value>
        </Parameter>
        <Parameter>
          <Name>filter</Name>
          <Value>*.srex</Value>
        </Parameter>
        <Parameter>
          <Name>thread</Name>
          <Value>0</Value>
        </Parameter>
      </Parameters>
      <SourceGUID>fa1f9673-27d7-43fb-89d8-ab42003477bb</SourceGUID>
      <Script>@using System.IO
@using System.Threading
@{
    ReportTask task = Model;
    Report report = task.Report;
    var helper = new TaskHelper(task);
    
    var items = new List&lt;object&gt;();
    var folder = task.Repository.ReplaceRepositoryKeyword(task.GetValue("folder"));
    var sql = task.GetValue("sql");
    var thread = task.GetNumericValue("thread");
    var excel = task.Repository.ReplaceRepositoryKeyword(task.GetValue("excel_path"));
    
    //Folder input
    if (!string.IsNullOrEmpty(folder) &amp;&amp; Directory.Exists(folder)) {
        foreach (var file in Directory.GetFiles(folder, task.GetValue("filter"))) {
            items.Add(file);
        }
    }
    //SQL input
    else if (!string.IsNullOrEmpty(sql)) {
        var dataTable = helper.LoadDataTable(sql);
        foreach(var row in dataTable.Rows) {
            items.Add(row);
        }
    }    
    //Excel input
    else if (!string.IsNullOrEmpty(excel) &amp;&amp; File.Exists(excel)) {
        var dataTable = DataTableLoader.FromExcel(excel, task.GetValue("excel_tab"));
        foreach(var row in dataTable.Rows) {
            items.Add(row);
        }
    }
    //OR 
    //   fill the items  collection with any relevant object

    if (thread == 0) {
        thread = items.Count;
    }
    
    task.LogMessage($"Processing {items.Count} item(s) using {thread} thread(s)");
    var tasks = new List&lt;Task&gt;();
    for (int i=1; i&lt;=thread &amp;&amp; !report.Cancel &amp;&amp; items.Count&gt;0;i++) {
        var id = $"[{i:00}]";
        tasks.Add(Task.Run(() =&gt; AsyncExec(id, items)));
        Thread.Sleep(10); 
    }
    
    while (!report.Cancel) {
        Thread.Sleep(100);
        if (!tasks.Exists(i =&gt; !i.IsCompleted)) {
            break;
        }    
    }    
}

@functions {
    async Task AsyncExec(string id, List&lt;object&gt; items) {
    	ReportTask task = Model;
        Report report = task.Report;
        try {
            task.LogMessage($"Starting Thread: {id}");
            
            while (true) {
                object item;
                lock (items) {
                    item = items.FirstOrDefault();
                    if (item != null) items.Remove(item);
                }
                if (report.Cancel || item == null) break;

                //Execute children
                foreach (var child in task.Tasks.Where(i=&gt; i.Enabled).OrderBy(i =&gt; i.SortOrder))
                {                
                    if (report.Cancel) break;
                    ReportTask newTask = (ReportTask) Helper.Clone(child);
                    newTask.Report = report;
                    newTask.InitReferences();

                    task.LogMessage($"{id} Processing task {newTask.Name} for item {item.ToString()}");
                    newTask.ExecInput = item;
                    newTask.Execute();
                }            
            }                
        }
        catch(Exception ex) {
            task.LogMessage($"{id} Unexpected exception: {ex.Message}");
        }
        finally {
            task.LogMessage($"Ending Thread: {id}");
        }
    }
}
</Script>
      <SortOrder>1</SortOrder>
    </ReportTask>
  </Tasks>
  <Views>
    <ReportView>
      <GUID>5c0ae5cc-8664-4771-8464-e4df51c51891</GUID>
      <Name>View</Name>
      <TemplateName>Report</TemplateName>
      <Parameters>
        <Parameter>
          <Name>messages_mode</Name>
          <Value>enabledshown</Value>
        </Parameter>
      </Parameters>
      <SortOrder>1</SortOrder>
    </ReportView>
  </Views>
  <Cancel>false</Cancel>
</Report>