@using Seal.Model;
@{
    ReportViewTemplate Template = Model;

    //Template Name
    Template.Name = ReportViewTemplate.ContainerGridFlexName;
    Template.Description = "A Grid or Flex CSS container (refer to https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Basic_concepts_of_grid_layout)";

    //If true, the view can be configured for a report model
    Template.ForReportModel = false;

    //display:flex; flex-flow:row nowrap; justify-content:flex-start; align-items:stretch; align-content:stretch; width:100%;
    //order:0; flex-grow:0; flex-shrink:1; flex-basis:fit-content; align-self:center

    //Parameters for this template
    Template.Parameters.Add(new Parameter() { Name = "container_css", TextValue = "display:flex;\r\nflex-flow:row wrap;", DisplayName = "Container CSS Style", Description = "CSS style attribute of the container.", TextSamples = ReportViewTemplate.GridFlexContainerParameterSample });
    Template.Parameters.Add(new Parameter() { Name = "container_class", DisplayName = "Container CSS Class", Description = "CSS class attribute of the container.", Enums = new string[] { "text-center", "bg-success", "bg-danger" }, UseOnlyEnumValues = false });
    Template.Parameters.Add(new Parameter() { Name = "default_item_css", Value = "width:100%;", DisplayName = "Default Items CSS style", Description = "Default CSS style of the items. A style can be overridden using 'Flex items CSS Styles'.", Enums = new string[] { "order:0; flex-grow:0; flex-shrink:1; flex-basis:fit-content; align-self:center;" }, UseOnlyEnumValues = false });
    Template.Parameters.Add(new Parameter() { Name = "items_css", Type = ViewParameterType.Text, TextValue = "", DisplayName = "Items CSS Styles", Description = "CSS styles apply to the items. One CSS style per line (line 1 is for item 1, line 2 for item 2, etc.).", TextSamples = ReportViewTemplate.GridFlexItemParameterSample});
    Template.Parameters.Add(new Parameter()
            {
                Name = "items_css_print",
                Type = ViewParameterType.Text,
                TextValue = "",
                DisplayName = "Items CSS Styles for the HTML Print result",
                Description = "CSS styles apply to the items when generating the HTML Print result. Typically Restrictions Views may be hidden as they will be empty.",
                TextSamples = new string[] {
"display:none;|Hide the first view if it contains the restrictions"
}
            });
    Template.Parameters.Add(new Parameter() { Name = Parameter.ForceRefreshParameter, DisplayName = "View Restrictions: Force refresh", BoolValue = false, Description = "If true, the view will be parsed when a View Restriction triggers an execution." });

    //Allowed template parent names
    Template.ParentNames = new List<string>() { "Report", "Model", "Tab Page", "Container", "Container Grid Flex", "Widget" };
}
