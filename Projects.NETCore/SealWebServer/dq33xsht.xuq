@using System.Data
@{
    MetaTable metaTable = Model;
    DataTable table = metaTable.NoSQLTable;
    ReportExecutionLog log = metaTable;

    log.LogMessage("Processing " + metaTable.Source.Name);
    foreach (var group in Repository.Instance.Security.Groups) {
        table.Rows.Add(
            group.Name, 
            Helper.GetEnumDescription(group.ViewType.GetType(),group.ViewType), 
            Helper.GetEnumDescription(group.PersFolderRight.GetType(), group.PersFolderRight),
            group.SqlModel ? "Yes" : "No",
            group.ManageDashboards ? "Yes" : "No",
            group.PersonalDashboardFolder ? "Yes" : "No",
            group.Culture != null ? group.Culture : "",
            group.LogoName != null ? group.LogoName : ""
            );   
    }
    
    log.LogMessage("{0} record(s) loaded", table.Rows.Count);
}

@using System.DirectoryServices;
@using System.DirectoryServices.AccountManagement;

@functions {
    //Returns the list of common users with their groups
    public List<SecurityUser> GetUsers() {
        var result = new List<SecurityUser>();

        //Static users...as defined in the Security Provider script used for development...
        var user = new SecurityUser(Repository.Instance.Security) { Name = "" };
        result.Add(user);
        user.AddDefaultSecurityGroup();

        user = new SecurityUser(Repository.Instance.Security) { Name = "ex" };
        result.Add(user);
        user.AddSecurityGroup("Group (Execute)");

        user = new SecurityUser(Repository.Instance.Security) { Name = "exed" };
        result.Add(user);
		user.AddSecurityGroup("Group (Execute)");
		user.AddSecurityGroup("Group (Edit)");

        user = new SecurityUser(Repository.Instance.Security) { Name = "daedit" };
        result.Add(user);
		user.AddSecurityGroup("Group (Edit Dashboards)");

        //Active Directory
        //Build list of users and their groups from the AD
        /*
        foreach (var group in Repository.Instance.Security.Groups) {
            PrincipalContext context = new PrincipalContext(ContextType.Domain);
            GroupPrincipal groupPrincipal = GroupPrincipal.FindByIdentity(context, group.Name);
            if (groupPrincipal != null) {
                foreach (var adUser in groupPrincipal.GetMembers(true)) {
                    var user = result.FirstOrDefault(i => i.Name == adUser.Name); 
                    if (user == null) {
                        user = new SecurityUser(Repository.Instance.Security);
                        user.Name = adUser.Name;
                        user.UserPrincipal = (UserPrincipal) adUser;
                        result.Add(user);
                    }
                    user.AddSecurityGroup(group.Name);
                }        
            }
        } */        
        return result;
    }
}

@using Seal.Model
@using Seal.Helpers
